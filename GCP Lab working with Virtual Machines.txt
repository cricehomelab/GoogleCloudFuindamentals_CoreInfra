GCP Lab Working With Virtual Machines

Task 1: Create a VM
1. Compute Engine > VM > Instances > Create
2. Configure machine
	Property							Value
	Name								mc-server
	Region								us-central1
	Zone								us-central1-a
	boot disk							Debian GNU/Linux 9 (stretch)
	Identity and access >access Scopes	Set access for each API
	Storage 							Read Write

3. Click Management, Security, disks, networking, sole tenancy
	A. Disks (add a disk to be used for game storage.
	B. Add new disk.
	C. Configure disk as follows:
		Property		Value
		Name			minecraft-disk
		Disk type		SSD Persistant disk
		Source type		None(blank disk)
		Size (GB)		50
		Encryption		Google managed key
	D. Click done.
4. Click Networking
	A. Add the following specifications.
		Property			Value
		network tags		minecraft-server
		network interfaces	Click default to edit the interfaces
		External IP			Create IP address
		name				mc-server-ip
	B. Click reserve
	C. Click done
5. Click Create

Task 2: Prepare the disk data
1. SSh to the mc-server VM.
2. Create a directory that serves as a mount point for the disk data.
	A. command: sudo mkdir -p /home/minecraft
3. Format the disk
	B. command: sudo mkfs.ext4 -F -E lazy_itable_init=0,lazy_journal_init=0,discard /dev/disk/by-id/google-minecraft-disk
	C. Example result
			mke2fs 1.42.12 (29-Aug-2014)
			Discarding device blocks: done
			Creating filesystem with 13107200 4k blocks and 3276800 inodes
			Filesystem UUID: 3d5b0563-f29e-4107-ad1a-ba7bf11dcf7c
			Superblock backups stored on blocks:
					32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
					4096000, 7962624, 11239424
			Allocating group tables: done
			Writing inode tables: done
			Creating journal (32768 blocks): done
			Writing superblocks and filesystem accounting information: done
4. Command to mount disk.
	A. Command: sudo mount -o discard,defaults /dev/disk/by-id/google-minecraft-disk /home/minecraft

TASK 3: Install and run the application
1. Update the debian repositories.
	A. Command: sudo apt-get update
2. Install the Headless JRE
	A. Command: sudo apt-get install -y default-jre-headless
3. Navigate to the directory where the persistant disk is mounted.
	A. Command: cd /home/minecraft
4. Install wget
	A. Command: sudo apt-get install wget
	B. Press "y" if prompted. 
6. Download the current minecraft server JAR file (1.11.2.JAR) run the following command:
	A. Command: sudo wget https://launcher.mojang.com/v1/objects/d0d0fe2b1dc6ab4c65554cb734270872b72dadd6/server.jar
7. Initialize Minecraft server	
	A. Command: sudo java -Xmx1024M -Xms1024M -jar server.jar nogui
	B. Verify the files were created
		1. Command sudo ls -l
	C. Edit the EULA
		1. sudo nano eula.txt
			a. change the last line from eula=false to eula=true
		2. Ctrl+O to save
		3. Ctrl+X to exit
8. Create a virtual terminal screen to start the minecraft server.
	A. To install screen run the following command:
		1. Command: sudo apt-get install -y screen
	B. Start the minecraft server in a screen virtual terminal.
		1. Command: sudo screen -S mcs java -Xmx1024M -Xms1024M -jar server.jar nogui
9. Detach from the screen and close the SSH session.
	A. Command: sudo screen -r mcs
	B. Command: exit

TASK 4: Allow Client traffic
1. Allow Client Traffic
	A. VPC Network > Firewall > create firewall rule
	B. Specify the rule details
		Property				value
		Name					minecraft-rule
		Target					specified target tags
		Target Tags				minecraft-server
		Source filter			IP ranges
		Source IP ranges		0.0.0.0/0
		Protocols and ports		Specified protocols and ports
	C. for tcp specify port 25565
	D. Click Create
2. Verify server availability
	A. Locate and copy the external IP address for the mc-server vm
	B. use the follwoing website to test the minecraft server https://mcsrvstat.us/

TASK 5: Schedule regular backups
1. Create a cloud storage bucket
	A. Compute Engine > VM Instances
	B. on mc-server select SSH
	C. Create a globally unique bucket name with your project ID
		1. Command: export YOUR_BUCKET_NAME=<Enter your bucket name here>
	D. Verify it with echo
		1. Command: echo $YOUR_BUCKET_NAME
	E. Launch gsutil and create a bucket
		1. command: gsutil mb gs://$YOUR_BUCKET_NAME-minecraft-backup
2. Create a backup script
	A. While SSH'd to mc-server instance
	B. command: cd /home/minecraft
	C. command: sudo nano /home/minecraft/backup.sh
	D. Copy and paste the script here:
	
#!/bin/bash
screen -r mcs -X stuff '/save-all\n/save-off\n'
/usr/bin/gsutil cp -R ${BASH_SOURCE%/*}/world gs://${YOUR_BUCKET_NAME}-minecraft-backup/$(date "+%Y%m%d-%H%M%S")-world
screen -r mcs -X stuff '/save-on\n'
	
	E. Ctl + O and CTL + X to save/exit
	F. Make the script executable
		1. Command: sudo chmod 755 /home/minecraft/backup.sh
3. Test the backup script and schedule a cron job.
	A. run this command in SSH
		1. command: . /home/minecraft/backup.sh
	B Verify backup was made
		1. storage > browser
		2. click on backup bucket name and make sure you see a folder with the time/date stamp
	C. Setup cron job
		1. command: sudo crontab -e
		2. type the number coresponding to nano and press enter.
		3. at the bottom of the cron table add the follwoing line:
		
		0 */4 * * * /home/minecraft/backup.sh
		
		(this line instructs cron to run backups every 4 hours)
		
		4. Ctl+O to save CTL+X to exit
		
		NOTE: This creates about 300 backups a month in Cloud Storage, so you will want to regularly delete them to avoid charges.
		Cloud Storage offers the Object Lifecycle Management feature to set a Time to Live (TTL) for objects, archive older 
		versions of objects, or "downgrade" storage classes of objects to help manage costs.

TASK 6: Server maintenance
1. connect via SSH to the server stop it, and shut down the VM instance
	A. in the mc-server SSH terminal type the following:
		1. Command: sudo screen -r -X stuff '/stop\n'
	B. Compute Engine > VM instances
		1. Click mc-server
		2. click stop
		NOTE: To start up your instance again, visit the instance page and then click Start. To start the Minecraft server again, you 
		can establish an SSH connection with the instance, remount your persistent disk, and start your Minecraft server in a new 
		screen terminal, just as you did previously.
2. Automate server maintenance with startup and shutdown scripts:
	A. click mc-server
	B. Click edit
	C. For custom metadata specify the following. 
		Key						value
		startup-script-url		https://storage.googleapis.com/cloud-training/archinfra/mcserver/startup.sh
		shutdown-script-url		https://storage.googleapis.com/cloud-training/archinfra/mcserver/shutdown.sh
	NOTE: You'll have to click Add item to add the shutdown-script-url. When you restart your instance, the startup script automatically
	mounts the Minecraft disk to the appropriate directory, starts your Minecraft server in a screen session, and detaches the session. 
	When you stop the instance, the shutdown script shuts down your Minecraft server before the instance shuts down. It's a best practice 
	to store these scripts in Cloud Storage.	
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			